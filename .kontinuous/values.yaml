pg:
  ~chart: pg
  cnpg-cluster:
    persistence:
      size: "50Gi"
    resources:
      requests:
        memory: 1Gi
      limits:
        cpu: "1"
        memory: 1Gi
    clusterExtraLabels:
      oblik.socialgouv.io/enabled: "false"

external-api:
  ~chart: app
  ~needs: [build-external-api, migrations-db, init-db]
  imagePackage: external-api
  host: "external-api-{{ .Values.global.host }}"
  containerPort: 3000
  labels:
    oblik.socialgouv.io/enabled: "false"
  resources:
    requests:
      cpu: 200m
      memory: 768Mi
    limits:
      cpu: 500m
      memory: 1024Mi
  livenessProbe:
    httpGet:
      path: /health
      port: 3000
  startupProbe:
    httpGet:
      path: /health
      port: 3000
  readinessProbe:
    httpGet:
      path: /health
      port: 3000
  envFrom:
    - configMapRef:
        name: external-api
    - configMapRef:
        name: pg
    - secretRef:
        name: pg
    - secretRef:
        name: pg-app
    - secretRef:
        name: token
    - secretRef:
        name: "{{.Values.global.s3SecretName}}"
  vars:
    DEBUG: "*info*"
    DEBUG_HIDE_DATE: "true"
    TZ: Europe/Paris
    SENTRY_RELEASE: "{{.Values.global.branchSlug32}}-{{.Values.global.shortSha}}"
    POSTGRES_HOST: "$(PGHOST)"
    POSTGRES_PORT: "$(PGPORT)"
    POSTGRES_DB: "$(PGDATABASE)"
    S3_BUCKET_ENDPOINT: "$(bucket_endpoint)"
    S3_BUCKET_NAME: "$(bucket_name)"
    S3_BUCKET_REGION: "$(bucket_region)"
    S3_BUCKET_ACCESS_KEY: "$(bucket_access_key)"
    S3_BUCKET_SECRET_KEY: "$(bucket_secret_key)"

backend:
  ~chart: app
  ~needs: [build-backend, migrations-db, init-db]
  imagePackage: backend
  host: "api-{{ .Values.global.host }}"
  containerPort: 3000
  labels:
    oblik.socialgouv.io/enabled: "false"
  resources:
    requests:
      cpu: 200m
      memory: 768Mi
    limits: # exports need a lot of CPU/RAM ATM
      cpu: 500m
      memory: 1024Mi
  livenessProbe:
    tcpSocket:
      port: 3000
  startupProbe:
    httpGet:
      path: /
      port: 3000
  readinessProbe:
    httpGet:
      path: /
      port: 3000
  envFrom:
    - configMapRef:
        name: backend
    - configMapRef:
        name: pg
    - secretRef:
        name: pg
    - secretRef:
        name: pg-app
    - secretRef:
        name: api-entreprise
    - secretRef:
        name: api-insee
    - secretRef:
        name: smtp
    - secretRef:
        name: token
    - secretRef:
        name: "{{.Values.global.s3SecretName}}"
  vars:
    DEBUG: "*info*"
    DEBUG_HIDE_DATE: "true"
    TZ: Europe/Paris
    SENTRY_RELEASE: "{{.Values.global.branchSlug32}}-{{.Values.global.shortSha}}"
    POSTGRES_HOST: "$(PGHOST)"
    POSTGRES_PORT: "$(PGPORT)"
    POSTGRES_DB: "$(PGDATABASE)"

    S3_BUCKET_ENDPOINT: "$(bucket_endpoint)"
    S3_BUCKET_NAME: "$(bucket_name)"
    S3_BUCKET_REGION: "$(bucket_region)"
    S3_BUCKET_ACCESS_KEY: "$(bucket_access_key)"
    S3_BUCKET_SECRET_KEY: "$(bucket_secret_key)"

cron:
  ~chart: app
  ~needs: [build-cron, migrations-db, init-db]
  imagePackage: cron
  labels:
    oblik.socialgouv.io/enabled: "false"
  resources:
    requests:
      cpu: 200m
      memory: 768Mi
    limits: # exports need a lot of CPU/RAM ATM
      cpu: 500m
      memory: 1024Mi
  livenessProbe:
    exec:
      command:
        - cat
        - /app/healthy
  readinessProbe:
    exec:
      command:
        - cat
        - /app/healthy
  startupProbe:
    exec:
      command:
        - cat
        - /app/healthy
  envFrom:
    - configMapRef:
        name: cron
    - configMapRef:
        name: pg
    - secretRef:
        name: pg
    - secretRef:
        name: pg-app
    - secretRef:
        name: smtp
    - secretRef:
        name: cron-secret
  vars:
    SENTRY_RELEASE: "{{.Values.global.branchSlug32}}-{{.Values.global.shortSha}}"
    POSTGRES_HOST: "$(PGHOST)"
    POSTGRES_PORT: "$(PGPORT)"
    POSTGRES_DB: "$(PGDATABASE)"

frontend-usagers:
  ~chart: app
  ~needs: [build-frontend-usagers]
  imagePackage: frontend-usagers
  host: "{{ .Values.global.host }}"
  containerPort: 8080
  labels:
    oblik.socialgouv.io/enabled: "false"
  resources:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      cpu: 100m
      memory: 128Mi
  livenessProbe:
    tcpSocket:
      port: 8080
  readinessProbe:
    httpGet:
      path: /
      port: 8080

frontend-bo:
  ~chart: app
  ~needs: [build-frontend-bo]
  imagePackage: frontend-bo
  host: "bo-{{ .Values.global.host }}"
  containerPort: 8080
  labels:
    oblik.socialgouv.io/enabled: "false"
  resources:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      cpu: 100m
      memory: 128Mi
  livenessProbe:
    tcpSocket:
      port: 8080
  readinessProbe:
    httpGet:
      path: /
      port: 8080

jobs:
  runs:
    build-migrations:
      use: build
      with:
        imagePackage: migrations
        context: ./
        dockerfile: packages/migrations/Dockerfile

    build-external-api:
      use: build
      with:
        imagePackage: external-api
        context: ./
        dockerfile: packages/external-api/Dockerfile

    build-backend:
      use: build
      with:
        imagePackage: backend
        context: ./
        dockerfile: packages/backend/Dockerfile
    build-cron:
      use: build
      with:
        imagePackage: cron
        context: ./
        dockerfile: packages/cron/Dockerfile
        buildArgs:
          SENTRY_URL: "https://sentry2.fabrique.social.gouv.fr"
          SENTRY_ORG: incubateur
          SENTRY_PROJECT: psn-vao-cron
        secrets:
          sentry_auth_token:
            secretName: cron-secret
            secretKey: SENTRY_AUTH_TOKEN

    build-frontend-usagers:
      use: build
      envFrom:
        - secretRef:
            name: "{{ or $.with.registrySecretRefName $.Values.global.registrySecretRefName }}"
        - configMapRef:
            name: matomo
      with:
        imagePackage: frontend-usagers
        context: ./
        dockerfile: packages/frontend-usagers/Dockerfile
        buildArgs:
          NUXT_PUBLIC_BACKEND_URL: "https://api-{{ .Values.global.host }}"
          NUXT_PUBLIC_MATOMO_ENABLED: "${FRONTEND_USAGERS_MATOMO_ENABLED}"
          NUXT_PUBLIC_MATOMO_HOST: "${FRONTEND_USAGERS_MATOMO_HOST}"
          NUXT_PUBLIC_MATOMO_SITE_ID: "${FRONTEND_USAGERS_MATOMO_SITE_ID}"
          NUXT_PUBLIC_SENTRY_DSN: "https://7fba53b76194053e13ea55fed61b7e0d@sentry2.fabrique.social.gouv.fr/17"
          NUXT_PUBLIC_SENTRY_RELEASE: "{{.Values.global.branchSlug32}}-{{.Values.global.shortSha}}"
          NUXT_PUBLIC_API_MAP_TILER: "g9IvoA8h0Ow8I9szhdzW"
          SENTRY_URL: "https://sentry2.fabrique.social.gouv.fr"
          SENTRY_ORG: incubateur
          SENTRY_PROJECT: psn-vao-usagers
        secrets:
          sentry_auth_token:
            secretName: frontend-secret
            secretKey: SENTRY_AUTH_TOKEN

    build-frontend-bo:
      use: build
      envFrom:
        - secretRef:
            name: "{{ or $.with.registrySecretRefName $.Values.global.registrySecretRefName }}"
        - configMapRef:
            name: matomo
      with:
        imagePackage: frontend-bo
        context: ./
        dockerfile: packages/frontend-bo/Dockerfile
        buildArgs:
          NUXT_PUBLIC_BACKEND_URL: "https://api-{{ .Values.global.host }}"
          NUXT_PUBLIC_MATOMO_ENABLED: "${FRONTEND_BO_MATOMO_ENABLED}"
          NUXT_PUBLIC_MATOMO_HOST: "${FRONTEND_BO_MATOMO_HOST}"
          NUXT_PUBLIC_MATOMO_SITE_ID: "${FRONTEND_BO_MATOMO_SITE_ID}"
          NUXT_PUBLIC_SENTRY_DSN: "https://65778f66439154c9e0321740d855ed80@sentry2.fabrique.social.gouv.fr/18"
          NUXT_PUBLIC_SENTRY_RELEASE: "{{.Values.global.branchSlug32}}-{{.Values.global.shortSha}}"
          NUXT_PUBLIC_API_MAP_TILER: "g9IvoA8h0Ow8I9szhdzW"
          SENTRY_URL: "https://sentry2.fabrique.social.gouv.fr"
          SENTRY_ORG: incubateur
          SENTRY_PROJECT: psn-vao-admin
        secrets:
          sentry_auth_token:
            secretName: frontend-secret
            secretKey: SENTRY_AUTH_TOKEN

    migrations-db:
      ~needs: [build-migrations, init-db]
      retry: 3
      checkout: true
      image: "{{ .Values.global.registry }}/{{ .Values.global.projectName }}/{{ .Values.global.imageRepository }}/migrations:{{ .Values.global.imageTag }}"
      env:
        - name: PG_VAO_SUPERUSER
          valueFrom:
            secretKeyRef:
              name: pg-superuser
              key: user
        - name: PG_VAO_SUPERPASSWORD
          valueFrom:
            secretKeyRef:
              name: pg-superuser
              key: password
        - name: POSTGRES_HOST
          valueFrom:
            secretKeyRef:
              name: pg-superuser
              key: host
        - name: POSTGRES_PORT
          valueFrom:
            secretKeyRef:
              name: pg-superuser
              key: port
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: pg-app
              key: PGDATABASE
        - name: S3_BUCKET_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: "{{.Values.global.s3SecretName}}"
              key: bucket_endpoint
        - name: S3_BUCKET_NAME
          valueFrom:
            secretKeyRef:
              name: "{{.Values.global.s3SecretName}}"
              key: bucket_name
        - name: S3_BUCKET_REGION
          valueFrom:
            secretKeyRef:
              name: "{{.Values.global.s3SecretName}}"
              key: bucket_region
        - name: S3_BUCKET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "{{.Values.global.s3SecretName}}"
              key: bucket_access_key
        - name: S3_BUCKET_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "{{.Values.global.s3SecretName}}"
              key: bucket_secret_key
      envFrom:
        - secretRef:
            name: "{{.Values.global.s3SecretName}}"

    init-db:
      ~needs: [pg]
      retry: 3
      checkout: true
      image: ghcr.io/socialgouv/docker/psql:7.7.3
      envFrom:
        - configMapRef:
            name: pg
        - secretRef:
            name: pg
      env:
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: pg-superuser
              key: user
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: pg-superuser
              key: password
        - name: PGHOST
          valueFrom:
            secretKeyRef:
              name: pg-superuser
              key: host
        - name: PGDATABASE
          valueFrom:
            secretKeyRef:
              name: pg-app
              key: PGDATABASE
      run: |
        echo "Initializing database"

        if [[ $(psql -d $PGDATABASE -c "\dt geo.*") ]]
        then
            echo "Data already loaded"
        else
          echo "01-init : "
          psql -f /workspace/pg/scripts/01-init.sql

          echo "Users creation : "
          psql -d $PGDATABASE -c "CREATE USER \"$PG_VAO_USER\" WITH password '$PG_VAO_PASSWORD'"
          psql -d $PGDATABASE -c "CREATE USER \"$PG_VAO_DOCUMENT_USER\" WITH password '$PG_VAO_DOCUMENT_PASSWORD'"

          echo "02-1-geo-init : "
          psql -d $PGDATABASE -f /workspace/pg/scripts/02/02-1-geo-init.sql
          echo "02-2-doc-init : "
          psql -d $PGDATABASE -f /workspace/pg/scripts/02/02-2-doc-init.sql
          echo "02-3-back-init : "
          psql -d $PGDATABASE -f /workspace/pg/scripts/02/02-3-back-init.sql
          echo "02-4-front-init : "
          psql -d $PGDATABASE -f /workspace/pg/scripts/02/02-4-front-init.sql
          echo "02-5-front-init : "
          psql -d $PGDATABASE -f /workspace/pg/scripts/02/02-5-ref-init.sql
          echo "03-1-geo-data : "
          psql -d $PGDATABASE -f /workspace/pg/scripts/03/03-1-geo-data.sql
          echo "03-2-back-data : "
          psql -d $PGDATABASE -f /workspace/pg/scripts/03/03-2-back-data.sql
          echo "03-2-ref-data : "
          psql -d $PGDATABASE -f /workspace/pg/scripts/03/03-3-ref-data.sql
        fi

migrate-s3:
  ~chart: app
  ~needs: [build-migrations, init-db]
  imagePackage: migrations
  entrypoint: ["tail", "-f", "/dev/null"]
  labels:
    oblik.socialgouv.io/enabled: "false"
  resources:
    requests:
      cpu: "1"
      memory: 4Gi
    limits:
      cpu: "2"
      memory: 6Gi
  readinessProbe:
    exec:
      command: ["sh", "-c", "ls"]
    initialDelaySeconds: 5
    periodSeconds: 10
  livenessProbe:
    exec:
      command: ["sh", "-c", "ls"]
    initialDelaySeconds: 5
    periodSeconds: 10
  startupProbe:
    exec:
      command: ["sh", "-c", "ls"]
    initialDelaySeconds: 5
    periodSeconds: 10
  env:
    - name: PG_VAO_SUPERUSER
      valueFrom:
        secretKeyRef:
          name: pg-superuser
          key: user
    - name: PG_VAO_SUPERPASSWORD
      valueFrom:
        secretKeyRef:
          name: pg-superuser
          key: password
    - name: POSTGRES_HOST
      valueFrom:
        secretKeyRef:
          name: pg-superuser
          key: host
    - name: POSTGRES_PORT
      valueFrom:
        secretKeyRef:
          name: pg-superuser
          key: port
    - name: POSTGRES_DB
      valueFrom:
        secretKeyRef:
          name: pg-app
          key: PGDATABASE
    - name: S3_BUCKET_ENDPOINT
      valueFrom:
        secretKeyRef:
          name: "{{.Values.global.s3SecretName}}"
          key: bucket_endpoint
    - name: S3_BUCKET_NAME
      valueFrom:
        secretKeyRef:
          name: "{{.Values.global.s3SecretName}}"
          key: bucket_name
    - name: S3_BUCKET_REGION
      valueFrom:
        secretKeyRef:
          name: "{{.Values.global.s3SecretName}}"
          key: bucket_region
    - name: S3_BUCKET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: "{{.Values.global.s3SecretName}}"
          key: bucket_access_key
    - name: S3_BUCKET_SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: "{{.Values.global.s3SecretName}}"
          key: bucket_secret_key
  envFrom:
    - secretRef:
        name: "{{.Values.global.s3SecretName}}"
