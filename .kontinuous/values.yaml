pg:
  ~chart: pg

backend:
  ~chart: app
  ~needs: [build-backend, migrations-db, init-db]
  imagePackage: backend
  host: "api-{{ .Values.global.host }}"
  containerPort: 3000
  resources:
    requests:
      cpu: 0.2
      memory: 256Mi
    limits:
      cpu: 2
      memory: 1Gi
  livenessProbe:
    tcpSocket:
      port: 3000
  startupProbe:
    httpGet:
      path: /
      port: 3000
  readinessProbe:
    httpGet:
      path: /
      port: 3000
  envFrom:
    - configMapRef:
        name: backend
    - configMapRef:
        name: pg
    - secretRef:
        name: pg
    - secretRef:
        name: api-entreprise
    - secretRef:
        name: api-insee
    - secretRef:
        name: smtp
    - secretRef:
        name: token
  env:
    - name: DEBUG
      value: "*info*"
    - name: DEBUG_HIDE_DATE
      value: "true"
    - name: TZ
      value: Europe/Paris
    - name: POSTGRES_HOST
      valueFrom:
        secretKeyRef:
          name: pg-app
          key: PGHOST
    - name: POSTGRES_PORT
      valueFrom:
        secretKeyRef:
          name: pg-app
          key: PGPORT
    - name: POSTGRES_DB
      valueFrom:
        secretKeyRef:
          name: pg-app
          key: PGDATABASE

frontend-usagers:
  ~chart: app
  ~needs: [build-frontend-usagers]
  imagePackage: frontend-usagers
  host: "{{ .Values.global.host }}"
  containerPort: 8080
  resources:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 256Mi
  livenessProbe:
    tcpSocket:
      port: 8080
  readinessProbe:
    httpGet:
      path: /
      port: 8080

frontend-bo:
  ~chart: app
  ~needs: [build-frontend-bo]
  imagePackage: frontend-bo
  host: "bo-{{ .Values.global.host }}"
  containerPort: 8080
  resources:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 256Mi
  livenessProbe:
    tcpSocket:
      port: 8080
  readinessProbe:
    httpGet:
      path: /
      port: 8080

jobs:
  runs:
    build-migrations:
      use: build
      with:
        imagePackage: migrations
        context: packages/migrations

    build-backend:
      use: build
      with:
        imagePackage: backend
        context: packages/backend

    build-frontend-usagers:
      use: build
      envFrom:
        - secretRef:
            name: "{{ or $.with.registrySecretRefName $.Values.global.registrySecretRefName }}"      
        - configMapRef:
            name: matomo
      with:
        imagePackage: frontend-usagers
        context: packages/frontend-usagers
        buildArgs:
          NUXT_PUBLIC_BACKEND_URL: "https://api-{{ .Values.global.host }}"
          NUXT_PUBLIC_MATOMO_ENABLED: "${FRONTEND_USAGERS_MATOMO_ENABLED}"
          NUXT_PUBLIC_MATOMO_HOST: "${FRONTEND_USAGERS_MATOMO_HOST}"
          NUXT_PUBLIC_MATOMO_SITE_ID: "${FRONTEND_USAGERS_MATOMO_SITE_ID}"
          NUXT_PUBLIC_SENTRY_DSN: "https://38eaf4da504d4809a74ce3134b759c91@sentry.fabrique.social.gouv.fr/103"

    build-frontend-bo:
      use: build
      envFrom:
        - secretRef:
            name: "{{ or $.with.registrySecretRefName $.Values.global.registrySecretRefName }}"      
        - configMapRef:
            name: matomo
      with:
        imagePackage: frontend-bo
        context: packages/frontend-bo
        buildArgs:
          NUXT_PUBLIC_BACKEND_URL: "https://api-{{ .Values.global.host }}"
          NUXT_PUBLIC_MATOMO_ENABLED: "${FRONTEND_BO_MATOMO_ENABLED}"
          NUXT_PUBLIC_MATOMO_HOST: "${FRONTEND_BO_MATOMO_HOST}"
          NUXT_PUBLIC_MATOMO_SITE_ID: "${FRONTEND_BO_MATOMO_SITE_ID}"
          NUXT_PUBLIC_SENTRY_DSN: "https://1c0cbefef75a451ca753a4392ebea5b4@sentry.fabrique.social.gouv.fr/104"

    migrations-db:
      ~needs: [build-migrations, init-db]
      retry: 3
      checkout: true
      image: "{{ .Values.global.registry }}/{{ .Values.global.projectName }}/{{ .Values.global.imageRepository }}/migrations:{{ .Values.global.imageTag }}"
      env:
        - name: PG_VAO_SUPERUSER
          valueFrom:
            secretKeyRef:
              name: pg-superuser
              key: user
        - name: PG_VAO_SUPERPASSWORD
          valueFrom:
            secretKeyRef:
              name: pg-superuser
              key: password
        - name: POSTGRES_HOST
          valueFrom:
            secretKeyRef:
              name: pg-superuser
              key: host
        - name: POSTGRES_PORT
          valueFrom:
            secretKeyRef:
              name: pg-superuser
              key: port
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: pg-app
              key: PGDATABASE
      
    init-db:
      ~needs: [pg]
      retry: 3
      checkout: true
      image: ghcr.io/socialgouv/docker/psql:7.7.3
      envFrom:
        - configMapRef:
            name: pg
        - secretRef:
            name: pg
      env:
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: pg-superuser
              key: user
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: pg-superuser
              key: password
        - name: PGHOST
          valueFrom:
            secretKeyRef:
              name: pg-superuser
              key: host
        - name: PGDATABASE
          valueFrom:
            secretKeyRef:
              name: pg-app
              key: PGDATABASE
      run: |
        echo "Initializing database"

        if [[ $(psql -d $PGDATABASE -c "\dt geo.*") ]]
        then
            echo "Data already loaded"
        else
          echo "01-init : "
          psql -f /workspace/pg/scripts/01-init.sql
          
          echo "Users creation : "
          psql -d $PGDATABASE -c "CREATE USER \"$PG_VAO_USER\" WITH password '$PG_VAO_PASSWORD'"
          psql -d $PGDATABASE -c "CREATE USER \"$PG_VAO_DOCUMENT_USER\" WITH password '$PG_VAO_DOCUMENT_PASSWORD'"

          echo "02-1-geo-init : "
          psql -d $PGDATABASE -f /workspace/pg/scripts/02/02-1-geo-init.sql
          echo "02-2-doc-init : "
          psql -d $PGDATABASE -f /workspace/pg/scripts/02/02-2-doc-init.sql
          echo "02-3-back-init : "
          psql -d $PGDATABASE -f /workspace/pg/scripts/02/02-3-back-init.sql
          echo "02-4-front-init : "
          psql -d $PGDATABASE -f /workspace/pg/scripts/02/02-4-front-init.sql
          echo "02-5-front-init : "
          psql -d $PGDATABASE -f /workspace/pg/scripts/02/02-5-ref-init.sql
          echo "03-1-geo-data : "
          psql -d $PGDATABASE -f /workspace/pg/scripts/03/03-1-geo-data.sql
          echo "03-2-back-data : "
          psql -d $PGDATABASE -f /workspace/pg/scripts/03/03-2-back-data.sql
          echo "03-2-ref-data : "
          psql -d $PGDATABASE -f /workspace/pg/scripts/03/03-3-ref-data.sql
        fi
