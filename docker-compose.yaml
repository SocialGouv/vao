volumes:
  postgres-data:
  minio-data:

services:
  frontend-usagers:
    image: "node:20.15.1-bullseye-slim"
    restart: unless-stopped
    working_dir: /app
    command: bash -c "/app/packages/frontend-usagers/start.sh"
    volumes:
      - $PWD:/app:delegated
    depends_on:
      backend:
        condition: service_started
    env_file:
      - ./.env
    environment:
      DEBUG: info:vao*, debug:vao*
      NUXT_PUBLIC_BACKEND_URL: ${BACKEND_URL}
      NUXT_PUBLIC_ENVIRONMENT: local
      NUXT_PUBLIC_MATOMO_ENABLED: ${FRONTEND_USAGERS_MATOMO_ENABLED}
      NUXT_PUBLIC_MATOMO_HOST: ${FRONTEND_USAGERS_MATOMO_HOST}
      NUXT_PUBLIC_MATOMO_SITE_ID: ${FRONTEND_USAGERS_MATOMO_SITE_ID}
      NUXT_PUBLIC_SENTRY_DSN: ${FRONTEND_USAGERS_SENTRY_DSN}
      NUXT_PUBLIC_SENTRY_ENABLED: ${FRONTEND_USAGERS_SENTRY_ENABLED}
      NUXT_PUBLIC_API_MAP_TILER: ${API_MAP_TILER}
    ports:
      - 3000:3000
    user: 1000:1000

  frontend-bo:
    image: "node:20.15.1-bullseye-slim"
    restart: unless-stopped
    working_dir: /app
    command: bash -c "/app/packages/frontend-bo/start.sh"
    volumes:
      - $PWD:/app:delegated
    depends_on:
      backend:
        condition: service_started
    env_file:
      - ./.env
    environment:
      NUXT_PUBLIC_MATOMO_ENABLED: ${FRONTEND_BO_MATOMO_ENABLED}
      NUXT_PUBLIC_MATOMO_HOST: ${FRONTEND_BO_MATOMO_HOST}
      NUXT_PUBLIC_MATOMO_SITE_ID: ${FRONTEND_BO_MATOMO_SITE_ID}
      NUXT_PUBLIC_SENTRY_DSN: ${FRONTEND_BO_SENTRY_DSN}
      NUXT_PUBLIC_SENTRY_ENABLED: ${FRONTEND_BO_SENTRY_ENABLED}
      NUXT_PUBLIC_BACKEND_URL: ${BACKEND_URL}
      NUXT_PUBLIC_ENVIRONMENT: local
      NUXT_PUBLIC_API_MAP_TILER: ${API_MAP_TILER}
      DEBUG: info:vao*
    ports:
      - 3001:3000
    user: 1000:1000

  backend:
    image: "node:20.15.1-bullseye-slim"
    restart: unless-stopped
    working_dir: /app
    command: bash -c "/app/packages/backend/start.sh"
    volumes:
      - $PWD:/app:delegated
    depends_on:
      postgres:
        condition: service_started
      migrations:
        condition: service_completed_successfully
      create-bucket:
        condition: service_completed_successfully
    env_file:
      - ./.env
    environment:
      DEBUG: "*info*"
      SENTRY_DSN: ${BACKEND_SENTRY_DSN}
      SENTRY_ENVIRONMENT: local
      SENTRY_ENABLED: ${BACKEND_SENTRY_ENABLED}
      TMP_DIRECTORY: ${BACKEND_TMP_DIRECTORY}
    ports:
      - 3010:3000
    user: 1000:1000

  api:
    working_dir: /app
    build:
      dockerfile: ./packages/api/Dockerfile
    develop:
      watch:
        - action: sync
          path: ./packages/api
          target: /app/packages/api
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
        - action: rebuild
          path: ./packages/api/package.json
    volumes:
      - $PWD:/app:delegated
    depends_on:
      postgres:
        condition: service_started
      migrations:
        condition: service_completed_successfully
      create-bucket:
        condition: service_completed_successfully
    env_file:
      - ./.env
    environment:
      DEBUG: "*info*"
      SENTRY_DSN: ${EXTERNAL-API_SENTRY_DSN}
      SENTRY_ENVIRONMENT: local
      SENTRY_ENABLED: ${EXTERNAL-API_SENTRY_ENABLED}
    ports:
      - 3020:3000
    user: 1000:1000

  migrations:
    image: "node:23.5-bullseye-slim"
    working_dir: /app
    command: bash -c "/app/packages/migrations/start.sh"
    volumes:
      - $PWD:/app:delegated
    depends_on:
      postgres:
        condition: service_started
      create-bucket:
        condition: service_completed_successfully
    env_file:
      - ./.env
    user: 1000:1000

  postgres:
    image: postgres:15.1
    restart: unless-stopped
    environment:
      - PGTZ=Europe/Paris
      - NODE_ENV=development
      - POSTGRES_USER=${PG_VAO_SUPERUSER}
      - POSTGRES_PASSWORD=${PG_VAO_SUPERPASSWORD}
    env_file:
      - ./.env
    ports:
      - 5436:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./pg/lancement.sh:/docker-entrypoint-initdb.d/lancement.sh
      - ./pg/scripts:/scripts
      - ./pg/seeds:/seeds
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  maildev:
    image: maildev/maildev:2.2.1
    restart: unless-stopped
    ports:
      - "1080:1080"
      - "1025:1025"

  pghero:
    image: ankane/pghero
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgres://${PG_VAO_SUPERUSER}:${PG_VAO_SUPERPASSWORD}@postgres:5432/vao
    ports:
      - "8080:8080"
    depends_on:
      - postgres

  minio:
    image: minio/minio
    restart: unless-stopped
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000" # MinIO api
      - "9001:9001" # MinIO admin console
    environment:
      MINIO_ROOT_USER: ${S3_BUCKET_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_BUCKET_SECRET_KEY}
      MINIO_REGION: ${S3_BUCKET_REGION}
    command: server /data --console-address ":9001"

  create-bucket:
    build:
      context: ./docker/dev-create-bucket
    environment:
      - S3_BUCKET_ACCESS_KEY=${S3_BUCKET_ACCESS_KEY}
      - S3_BUCKET_SECRET_KEY=${S3_BUCKET_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
    depends_on:
      - minio
