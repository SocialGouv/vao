volumes:
  postgres-data:

services:
  frontend-usagers:
    build:
      context: .
      dockerfile: packages/frontend-usagers/Dockerfile.local
    working_dir: /app
    command: /app/packages/frontend-usagers/entrypoint.sh
    volumes:
      - $PWD:/app:delegated
      - $HOME/.ssh:/home/node/.ssh:ro
      - $HOME/.gitconfig:/home/node/.gitconfig:ro
      - $HOME/.npm:/home/node/.npm:delegated
    env_file:
      - ./.env
    environment:
      DEBUG: info:vao*, debug:vao*
      NUXT_PUBLIC_BACKEND_URL: ${BACKEND_URL}
      NUXT_PUBLIC_ENVIRONMENT: local
      NUXT_PUBLIC_MATOMO_ENABLED: ${FRONTEND_USAGERS_MATOMO_ENABLED}
      NUXT_PUBLIC_MATOMO_HOST: ${FRONTEND_USAGERS_MATOMO_HOST}
      NUXT_PUBLIC_MATOMO_SITE_ID: ${FRONTEND_USAGERS_MATOMO_SITE_ID}
      NUXT_PUBLIC_SENTRY_DSN: ${FRONTEND_USAGERS_SENTRY_DSN}
      NUXT_PUBLIC_SENTRY_ENABLED: ${FRONTEND_USAGERS_SENTRY_ENABLED}
    ports:
      - 3000:3000

  frontend-bo:
    build:
      context: .
      dockerfile: packages/frontend-bo/Dockerfile.local
    working_dir: /app
    command: /app/packages/frontend-bo/entrypoint.sh
    volumes:
      - $PWD:/app:delegated
      - $HOME/.ssh:/home/node/.ssh:ro
      - $HOME/.gitconfig:/home/node/.gitconfig:ro
      - $HOME/.npm:/home/node/.npm:delegated
    env_file:
      - ./.env
    environment:
      NUXT_PUBLIC_MATOMO_ENABLED: ${FRONTEND_BO_MATOMO_ENABLED}
      NUXT_PUBLIC_MATOMO_HOST: ${FRONTEND_BO_MATOMO_HOST}
      NUXT_PUBLIC_MATOMO_SITE_ID: ${FRONTEND_BO_MATOMO_SITE_ID}
      NUXT_PUBLIC_SENTRY_DSN: ${FRONTEND_BO_SENTRY_DSN}
      NUXT_PUBLIC_SENTRY_ENABLED: ${FRONTEND_BO_SENTRY_ENABLED}
      NUXT_PUBLIC_BACKEND_URL: ${BACKEND_URL}
      NUXT_PUBLIC_ENVIRONMENT: local
      DEBUG: info:vao*
    ports:
      - 3001:3000

  backend:
    build:
      context: packages/backend
      dockerfile: Dockerfile.local
    working_dir: /app
    command: /app/entrypoint.sh
    volumes:
      - $PWD/packages/backend:/app:delegated
      - $HOME/.ssh:/home/node/.ssh:ro
      - $HOME/.gitconfig:/home/node/.gitconfig:ro
      - $HOME/.npm:/home/node/.npm:delegated
    depends_on:
      postgres:
        condition: service_started
      migrations:
        condition: service_completed_successfully
    env_file:
      - ./.env
    environment:
      DEBUG: "*info*"
      SENTRY_DSN: ${BACKEND_SENTRY_DSN}
      SENTRY_ENVIRONMENT: local
      SENTRY_ENABLED: ${BACKEND_SENTRY_ENABLED}
      TMP_DIRECTORY: ${BACKEND_TMP_DIRECTORY}
    ports:
      - 3010:3000

  migrations:
    build:
      context: packages/migrations
      dockerfile: Dockerfile.local
    working_dir: /app
    volumes:
      - $PWD/packages/migrations:/app:delegated
      - $HOME/.ssh:/home/node/.ssh:ro
      - $HOME/.gitconfig:/home/node/.gitconfig:ro
      - $HOME/.npm:/home/node/.npm:delegated
    depends_on:
      - postgres
    env_file:
      - ./.env

  postgres:
    image: postgres:15.1
    restart: always
    environment:
      - PGTZ=Europe/Paris
      - NODE_ENV=development
      - POSTGRES_USER=${PG_VAO_SUPERUSER}
      - POSTGRES_PASSWORD=${PG_VAO_SUPERPASSWORD}
    env_file:
      - ./.env
    ports:
      - 5436:5432
    volumes:
      - ./pg/lancement.sh:/docker-entrypoint-initdb.d/lancement.sh
      - ./pg/scripts:/scripts
      - ./pg/seeds:/seeds
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  maildev:
    image: maildev/maildev:2.1.0
    ports:
      - "1080:1080"
      - "1025:1025"

  pghero:
    image: ankane/pghero
    environment:
      - DATABASE_URL=postgres://${PG_VAO_SUPERUSER}:${PG_VAO_SUPERPASSWORD}@postgres:5432/vao
    ports:
      - "8080:8080"
    depends_on:
      - postgres
